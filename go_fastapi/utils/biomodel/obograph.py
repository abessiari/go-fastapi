""" Class model autogenerated from flask model """


class AbstractPropertyValue():
    """
    AbstractPropertyValue

    Arguments
    ---------
     val : 

         value part

     pred : 

         predicate (attribute) part

     xrefs : 

         Xrefs provenance for property-value

    """
    def __init__(self,
                 id=None,
                 val=None,
                 pred=None,
                 xrefs=None,
                 **kwargs):
        self.id=id
        self.val=val
        self.pred=pred
        self.xrefs=xrefs


    """
    Create an object from a json representation
    """
    def from_json(json_obj={}):
        obj = AbstractPropertyValue()
        if 'pred' in json_obj:
            obj.pred = json_obj['pred']
        if 'val' in json_obj:
            obj.val = json_obj['val']
        if 'xrefs' in json_obj:
            obj.xrefs = [x for x in json_obj['xrefs']]
        return obj

class SynonymPropertyValue(AbstractPropertyValue):
    """
    SynonymPropertyValue

    Superclass: AbstractPropertyValue

    Arguments
    ---------
    """
    def __init__(self,
                 id=None,
                 **kwargs):
        super(SynonymPropertyValue, self).__init__(id, **kwargs)


    """
    Create an object from a json representation
    """
    def from_json(json_obj={}):
        obj = SynonymPropertyValue()
        if 'pred' in json_obj:
            obj.pred = json_obj['pred']
        if 'val' in json_obj:
            obj.val = json_obj['val']
        if 'xrefs' in json_obj:
            obj.xrefs = [x for x in json_obj['xrefs']]
        return obj

class SynonymPropertyValue(AbstractPropertyValue):
    """
    SynonymPropertyValue

    Superclass: AbstractPropertyValue

    Arguments
    ---------
    """
    def __init__(self,
                 id=None,
                 **kwargs):
        super(SynonymPropertyValue, self).__init__(id, **kwargs)


    """
    Create an object from a json representation
    """
    def from_json(json_obj={}):
        obj = SynonymPropertyValue()
        if 'pred' in json_obj:
            obj.pred = json_obj['pred']
        if 'val' in json_obj:
            obj.val = json_obj['val']
        if 'xrefs' in json_obj:
            obj.xrefs = [x for x in json_obj['xrefs']]
        return obj

class DefinitionPropertyValue(AbstractPropertyValue):
    """
    DefinitionPropertyValue

    Superclass: AbstractPropertyValue

    Arguments
    ---------
    """
    def __init__(self,
                 id=None,
                 **kwargs):
        super(DefinitionPropertyValue, self).__init__(id, **kwargs)


    """
    Create an object from a json representation
    """
    def from_json(json_obj={}):
        obj = DefinitionPropertyValue()
        if 'pred' in json_obj:
            obj.pred = json_obj['pred']
        if 'val' in json_obj:
            obj.val = json_obj['val']
        if 'xrefs' in json_obj:
            obj.xrefs = [x for x in json_obj['xrefs']]
        return obj

class DefinitionPropertyValue(AbstractPropertyValue):
    """
    DefinitionPropertyValue

    Superclass: AbstractPropertyValue

    Arguments
    ---------
    """
    def __init__(self,
                 id=None,
                 **kwargs):
        super(DefinitionPropertyValue, self).__init__(id, **kwargs)


    """
    Create an object from a json representation
    """
    def from_json(json_obj={}):
        obj = DefinitionPropertyValue()
        if 'pred' in json_obj:
            obj.pred = json_obj['pred']
        if 'val' in json_obj:
            obj.val = json_obj['val']
        if 'xrefs' in json_obj:
            obj.xrefs = [x for x in json_obj['xrefs']]
        return obj

class Meta():
    """
    Meta

    Arguments
    ---------
     definition : 

         definition plus source

     comments : 

         comments

     subsets : 

         subsets (slims)

     xrefs : 

         xrefs plus source

     synonyms : 

         synonyms plus scope, type and source

     basic_property_values : 

         synonyms plus scope, type and source

    """
    def __init__(self,
                 id=None,
                 definition=None,
                 comments=None,
                 subsets=None,
                 xrefs=None,
                 synonyms=None,
                 basic_property_values=None,
                 **kwargs):
        self.id=id
        self.definition=definition
        self.comments=comments
        self.subsets=subsets
        self.xrefs=xrefs
        self.synonyms=synonyms
        self.basic_property_values=basic_property_values


    """
    Create an object from a json representation
    """
    def from_json(json_obj={}):
        obj = Meta()
        if 'basic_property_values' in json_obj:
            obj.basic_property_values = [DefinitionPropertyValue.from_json(x) for x in json_obj['basic_property_values']]
        if 'subsets' in json_obj:
            obj.subsets = [x for x in json_obj['subsets']]
        if 'synonyms' in json_obj:
            obj.synonyms = [SynonymPropertyValue.from_json(x) for x in json_obj['synonyms']]
        if 'comments' in json_obj:
            obj.comments = [x for x in json_obj['comments']]
        if 'xrefs' in json_obj:
            obj.xrefs = [SynonymPropertyValue.from_json(x) for x in json_obj['xrefs']]
        if 'definition' in json_obj:
            obj.definition = DefinitionPropertyValue.from_json(json_obj['definition'])
        return obj

class Node():
    """
    Node

    Arguments
    ---------
     id : 

         ID or CURIE

     lbl : 

         human readable label, maps to rdfs:label

    """
    def __init__(self,
                 id=None,
                 lbl=None,
                 **kwargs):
        self.id=id
        self.id=id
        self.lbl=lbl


    """
    Create an object from a json representation
    """
    def from_json(json_obj={}):
        obj = Node()
        if 'id' in json_obj:
            obj.id = json_obj['id']
        if 'lbl' in json_obj:
            obj.lbl = json_obj['lbl']
        return obj

class Edge():
    """
    Edge

    Arguments
    ---------
     sub : 

         Subject (source) Node ID

     pred : 

         Predicate (relation) ID

     obj : 

         Object (target) Node ID

    """
    def __init__(self,
                 id=None,
                 sub=None,
                 pred=None,
                 obj=None,
                 **kwargs):
        self.id=id
        self.sub=sub
        self.pred=pred
        self.obj=obj


    """
    Create an object from a json representation
    """
    def from_json(json_obj={}):
        obj = Edge()
        if 'pred' in json_obj:
            obj.pred = json_obj['pred']
        if 'sub' in json_obj:
            obj.sub = json_obj['sub']
        if 'obj' in json_obj:
            obj.obj = json_obj['obj']
        return obj

class Graph():
    """
    Graph

    Arguments
    ---------
     nodes : 

         All nodes in graph

     edges : 

         All edges in graph

    """
    def __init__(self,
                 id=None,
                 nodes=None,
                 edges=None,
                 **kwargs):
        self.id=id
        self.nodes=nodes
        self.edges=edges


    """
    Create an object from a json representation
    """
    def from_json(json_obj={}):
        obj = Graph()
        if 'nodes' in json_obj:
            obj.nodes = [Node.from_json(x) for x in json_obj['nodes']]
        if 'edges' in json_obj:
            obj.edges = [Edge.from_json(x) for x in json_obj['edges']]
        return obj

class GraphDocument():
    """
    GraphDocument

    Arguments
    ---------
     graphs : 

         all graphs

    """
    def __init__(self,
                 id=None,
                 graphs=None,
                 **kwargs):
        self.id=id
        self.graphs=graphs


    """
    Create an object from a json representation
    """
    def from_json(json_obj={}):
        obj = GraphDocument()
        if 'graphs' in json_obj:
            obj.graphs = [Graph.from_json(x) for x in json_obj['graphs']]
        return obj

